% start this function to start the epxeriment

function main()
    global Window_Width Window_Height NbX NbY

    %% Clear the workspace and the screen
    sca;
    close all;
    clear;
    PsychDefaultSetup(2);
    % set the seed for reproducibility
    rng('default')

    % fani windows desktopauflösung: 1920 x 1080, frame rate 60,033 Hz
    % Get the screen numbers
    screens = Screen('Screens');
    % Draw to the external screen if avaliable
    ScreenNumber = max(screens);

    %set(0,'units','pixels') 
    %Pix_SS = get(0,'screensize')
    [WindowDimensions] = Screen('rect',  ScreenNumber);
    WhiteLuminance = WhiteIndex(ScreenNumber);
    BlackLuminance= BlackIndex(ScreenNumber);
    FrameRate=Screen('NominalFrameRate', ScreenNumber);

    Window_Width = WindowDimensions(3);
    Window_Height = WindowDimensions(4);

    %% Standard parameters for this experiment

        % taken from ZhaopingGuyader_Exp_SetUp.m
        Conditions_Aprime = [37:40];  %condition A' in Zhaoping and Guyader 2007
        Conditions_Bprime = [45:48];  %condition B' in Zhaoping and Guyader 2007
        Conditions_A = [29:32];  %condition A in Zhaoping and Guyader 2007
        Conditions_B = [33:36];  %condition B in Zhaoping and Guyader 2007
        Conditions_Asimple = [49, 50];  %condition Asimple, in Zhaoping and Guyader 2007, repeated twice to match the numbers in A, B etc.
        Conditions_Bsimple = [51, 52, 53, 54];  %condition Bsimple, in Zhaoping and Guyader 2007, repeated twice to match the numbers in A, B etc.
        
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
        %
        %---------- determine the conditions in terms of variables 
        %-----------ItemTypes, AllCubes, in GetAllCubes_Aug2017.m
        %----------
        Conditions_ForExp{1} = Conditions_Asimple;
        Conditions_ForExp{2} = Conditions_Bsimple;
        Conditions_ForExp{3} = Conditions_A;
        Conditions_ForExp{4} = Conditions_B;
        NConditions = length(Conditions_ForExp);
    
        %--- set sizes of these NConditions conditions
        %OneSetSize = [12, 9];  %[15, 11];   %--- =[NbX, NbY], the number of columns and rows of the search array
        SetSize_prompt = {'Numbers of columns (minimum 4) and rows (mininum 4) in the search array'};
        SetSize_dialog_title='Row_column_Num';
        num_lines=1;
        SetSize_default_answer={'9 12'};
        SetSize_info = inputdlg(SetSize_prompt,SetSize_dialog_title,num_lines,SetSize_default_answer);
        OneSetSize = str2num(SetSize_info{1}); %gives column x row num
        
        SetSizes_ForExp = repmat(OneSetSize, NConditions, 1);  %== could also give different set sizes for different conditions.

        
        NbX = OneSetSize(2); % number stimulus x axis
        NbY = OneSetSize(1); % number stimulus y axis

        % she does jitter here (80%), plus target side (first half 1 side, 2nd
        % half other side)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %
        % -------GapDuration, FixationDuration backgroundScale
        %
        GapDuration = 0.2; %---- determine the Duration of gap between fixation point disappearance and search array appearance.
        FixationDuration = 0.7; %---- determine the Duration of gap between fixation point disappearance and search array appearance.
        BackgroundScale = 0.75; %--- background


        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% -----
        %---------- AllCubes, ItemTypes, NewAllCubes, NewItemTypes, NewConditions_ForExp, Dot_Size, 
        %-----------FixationRadius, New2Old_ItemTypeIndices, New2Old_CubeIndices  ------
        %---------
        % -------------
        %--- Get the AllCubes and ItemTypes using GetAllCubes_Aug2017.m, the size of each item 
        %----is the same across the different conditions or set sizes.
        %---

        Size = min([round(Window_Width/NbX*2/3), round(Window_Height/NbY*2/3)]);
        Sizebar = round(Size*0.7);
        %--- make sure that Size-Sizebar is an even number.
        if mod(Size-Sizebar, 2) ~=0
	        Size  = Size+1;
        end
        BarWidth  = round(Sizebar/10);
        SmallAngle  = 10;
        CloseMovePixel = round(Sizebar/6);









    grid_visual_angle = [34, 46]; % in degrees
    stim_size = [0.12, 1.1]; % in degrees
    ec_circle = 15; % circle of stim pos in degrees
    ec_min = 12; % minimum horizontal eccentricity
    fix_stim_dia = 0.3; % in degrees
    %stimulus_brightness = 48; % in cd/m² -> dont need, white bg & black stim?
    %conditions = [a_simple, b_simple, a, b]; % conditions you wanna use
    
    %% Ask user for input parameters
    % Ask user for input/change params
    data = startGUI();

    % Create a folder with User ID and the current date and time 
    folder_name = ['C:\Users\idm\Desktop\Semester4\Internship\Matlab\Data\test_' datestr(now, 'yyyymmdd_HHMMSS')];
    mkdir(folder_name);
    
    % Save all params into folder
    param = {NbX, NbY, grid_visual_angle, stim_size, ec_circle, ec_min, fix_stim_dia};
    param_table = cell2table(param, 'VariableNames', {'n_rows', 'n_columns', 'grid_visual_angle', 'stim_size', 'eccentricity_circle', ...
                                                      'eccentricity_min', 'fixation_stimulus_diameter'});
    saveData(param_table, folder_name, 'parameters.csv');
 
    % Save input parameters in a table
    param = {data.date, data.id, data.name, data.n_trials, data.conditions, data.notes};
    param_table = cell2table(param, 'VariableNames', {'Date', 'ID', 'Name', 'Trials', 'Conditions', 'Notes'});
    saveData(param_table, folder_name, 'info.csv');
 


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Function Calls
        
    %% Generate trials
    trials = generateTrials(data.n_trials, data.conditions, NbX, NbY, grid_visual_angle, ec_circle, ec_min);
    trial_data_file_name = fullfile(folder_name, 'trials.mat');
    save(trial_data_file_name, 'trials');
    
    %% Fill trials with angles
    trial_data = createTrialsByCondition(data.n_trials, trials, data.conditions);
    trial_data_file_name = fullfile(folder_name, 'trials_filled.mat');
    save(trial_data_file_name, 'trial_data');

    %% randomize order of trials
    rand_trials = randomize_trials(trial_data, folder_name); % struct to table
    rand_trials_file_name = fullfile(folder_name, 'rand_trials.mat');
    save(rand_trials_file_name, 'rand_trials');

    %% Start Psychtoolbox and display instructions
    %startPsychToolbox(rand_trials, folder_name); 
    
    %%%% Load custom path for testing 
    data_struct = load('C:\Users\idm\Desktop\Semester4\Internship\Matlab\Data\test_20240406_155217\rand_trials.mat');
    data = data_struct.rand_trials;
    folder_name = 'C:\Users\idm\Desktop\Semester4\Internship\Matlab\Data\test_20240406_155217\';
    startPsychToolbox(data, folder_name); 
    %%%

    % Step 6: Analyse Data
    %endExperiment();

    % optional eye tracking in case it doesnt work
end
%%
function startPsychToolbox(data, folder_name)
    subfolder_name = [folder_name 'results' datestr(now, 'yyyymmdd_HHMMSS')];
    mkdir(subfolder_name);

    % Open Psychtoolbox window
    Screen('Preference', 'SkipSyncTests', 1); % Skip synchronization tests, disable for experiment!!

%%%

    % Define colors for background and stim
    color_bg = WhiteIndex(screenNumber);
    color_stim = BlackIndex(screenNumber);
    % Size of the fixation point
    dotSizePix = 8;
    
    % Open window
    [window, windowRect] = PsychImaging('OpenWindow', screenNumber, color_bg); 
    [screenXpixels, screenYpixels] = Screen('WindowSize', window);
    xCenter = screenXpixels / 2;
    yCenter = screenYpixels / 2;
    % Set text properties
    Screen('TextSize', window, 30);
    Screen('TextColor', window, color_stim);
    % Enable alpha blending for anti-aliasing
    Screen('BlendFunction', window, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    %%%%%%% Define texts
    texts = {'Welcome :)', ...
             'In this experiment you will be presented a grid of bars \n Press the Left Arrow Key if you can see a uniquely oriented bar on the Left side of the screen \n and the Right Arrow Key if you can see a uniquely oriented bar on the Right side of the screen', ...
             'Before each trial you will see a dot in the middle of the screen \n The next trial will only start if you look at it for around 2 seconds/PRESS A KEY TODO. \n (If you need a break inbetween not looking at it will do the trick ;)', ...
             'Please try to be as fast and as accurate as possible!', ...
             'TODO Insert Exercise Trials', ...
             'Press Any Key To Begin'};
    % Display each instruction/text
    for t = 1:numel(texts)
        % Display text
        displayText(window, texts{t});
        % Wait for a key press to continue
        while KbCheck; end % Wait for all keys to be released
        while ~KbCheck; end % Wait for a key press
        [~, ~, keyCode] = KbCheck; % Check for key press
        % Check for Escape key press to close the experiment
        if keyCode(KbName('Escape'))
            break;
        end
    end    

    trial_results = [];

    %%%%%% start experiment
    % TODO CHANGE BACK FOR EXPERIMENT 
    % for i = 1:size(data, 1)
    for i = 1:4
        % Display fixation dot & empty screen after
        % TODO still works with keypress, need eyetracking?
        drawFixation(window, xCenter, yCenter, color_stim, dotSizePix);
        drawEmptyScreen(window, color_bg, 1)
       
        % Display stimulus
        current_stim = data.TrialMatrix{i};
        current_cond = data.Condition{i};
        current_target_pos = data.TargetSide{i};

        % Define parameters for the bars
        bar_width = 5; % Width of each bar
        bar_height = 20; % Height of each bar
        
        
        jitter_x = 0.8*(Window_Width/NbX*1/3); % Maximum amount of jitter for each bar
        jitter_y = 0.8*(Window_Height/NbY*1/3);

        if Max_Jitter_x < 0 | Max_Jitter_y < 0
       	     'negative space for jitter'
    		return;
	    end

        % start stim
        trial_result = displayStim(window, bar_width, bar_height, jitter_x, jitter_y, ...
            current_stim, current_cond, current_target_pos, screenXpixels, screenYpixels, color_stim);
    
        trial_results = [trial_results, trial_result];
        % save/overwrite each loop in case experiment crashes/gets aborted
        results_file_name = fullfile(subfolder_name, 'trial_results.mat');
        save(results_file_name, 'trial_results');
        
        % Check for Escape key press to close the experiment
        if keyCode(KbName('Escape'))
            disp('Experiment Aborted: Escape Key was pressed')
            break;
        end
    end

    Screen('BlendFunction', window, GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
    % TODO CHANGE BACK FOR EXPERIMENT 
    %if i == size(data, 1)
    if i == 4 
        % Draw the instructions: in reality the person could press any of
        % the listened to keys to exist. But they do not know that.
        displayText(window, 'Experiment Complete\n Thank you for your participation! <3');
        % Flip to the screen
        %Screen('Flip', window);
        WaitSecs(4);
        % Wait for a key press
        KbStrokeWait(-1);

    end
    disp('Experiment Finished')
    % Close the window
    sca;
end

% function endExperiment()
%     % Cleanup Psychtoolbox and any other resources
% end
