function trial = displayStim_new(window, bar_wh_ratio, jitter_x, jitter_y, current_stim, current_cond, current_target_pos, screenXpixels, screenYpixels, color_stim, timeoutDuration)

% Define the keyboard keys that are listened for
% TODO add more keys for slipping
escapeKey = KbName('ESCAPE');
leftKey = KbName('LeftArrow');
rightKey = KbName('RightArrow');
leftShift = KbName('LeftShift');
rightShift = KbName('RightShift');
leftKey = leftShift;
rightKey = rightShift;

num_cols = size(current_stim, 2);
num_rows = size(current_stim, 1);
cell_width = screenXpixels / num_cols;
cell_height = screenYpixels / num_rows;

% Define a line length based on the cell size
line_length = min(cell_width, cell_height) * 0.5;
line_width = bar_wh_ratio * line_length;

trial = [];

for row = 1:num_rows %y
    for col = 1:num_cols %x
        % Get random jitter for this position
        x_jitter = randi([-jitter_x, jitter_x]);
        y_jitter = randi([-jitter_y, jitter_y]);

        % Calculate center of each cell & add jitter
        x_center = ((col - 0.5) * cell_width) + x_jitter;
        y_center = ((row - 0.5) * cell_height)+ y_jitter;

        angles = current_stim{row, col}; % Retrieve angles for this cell

        % Loop over each angle and draw the lines
        for angle = angles
            dx = (line_length / 2) * cosd(angle); % cosd/sind can use degrees, so dont
            dy = (line_length / 2) * sind(angle); % need to convert to radians like for cos/sin
            line_coords = [-dx, dy; dx, -dy]'; % Column vector for x and y coordinates
            % Draw the line
            Screen('DrawLines', window, line_coords, line_width, color_stim, [x_center, y_center], 2);
        end
    end
end

% Flip to the screen for each trial
Screen('Flip', window);

% Record the start time of the trial
trial_start_time = GetSecs;
response = 'none'; % Default response if no key is pressed

%%% Code from https://peterscarfe.com/poserCuingExperiment.html :
% Now we wait for a keyboard button signaling the observers response.
% The left arrow key signals a "left" response and the right arrow key
% a "right" response. You can also press escape if you want to exit the
% program
respToBeMade = true;
startResp = GetSecs;
while respToBeMade && (GetSecs - trial_start_time < timeoutDuration)
%while respToBeMade
    [keyIsDown,secs, keyCode] = KbCheck(-1);
    if keyCode(escapeKey)
        ShowCursor;
        sca;
        return
    elseif keyCode(leftKey)
        response = 'L';
        respToBeMade = false;
    elseif keyCode(rightKey)
        response = 'R';
        respToBeMade = false;
    end
end
endResp = GetSecs;
rt = endResp - startResp;

% noise
fs = 5000; t = 0:0.00002:0.02;
LowToneSoundwave =  sin(2*pi*fs/2*t);
sound(LowToneSoundwave, fs); pause(0.2);
%

% Work out if the location of the target was identified corrcetly
if current_target_pos == response
    correctness = 1;
elseif current_target_pos ~= response
    correctness = 0;
end

%%%

% Record user response and response time
trial.condition = current_cond;
trial.target = current_target_pos;
trial.response = response;
trial.correct = correctness;
trial.start = startResp;
trial.end = endResp;
trial.rt = rt;

end
